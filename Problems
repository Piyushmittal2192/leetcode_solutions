1. Two Sum -> https://codeburst.io/understanding-the-two-sum-problem-9a6428083a7f
7. Reverse Integer -> 
class Solution:
    def reverse(self, x: int) -> int:
        neg = False
        if x < 0:
            a = -1 * int(str(abs(x))[::-1])
        else:
            a = int(str(abs(x))[::-1])
        if a >= -pow(2,31) and a <= pow(2,31) - 1:
            return a
        else:
            return 0
3. reverse bits -> 
class Solution:
    def reverseBits(self, n: int) -> int:
        if n >=0 and n <= pow(2, 32) - 1 :
            print(n)
            bin_int = bin(n).replace("0b","")
            if len(str(bin_int)) <= 32:
                bin_int_str = ''.join((32-len(bin_int))*['0']) + str(bin_int)
                rev_inp = int(bin_int_str[::-1]) 
                binary1 = rev_inp
                decimal, i, n = 0, 0, 0
                while(rev_inp != 0):
                    dec = rev_inp % 10
                    decimal = decimal + dec * pow(2, i)
                    rev_inp = rev_inp//10
                    i += 1
                return decimal
            
        else:
            return
        
        
